#ifndef RECEIPTELEMENT_H
#define RECEIPTELEMENT_H

#include <QWidget>

#include "product.h"

namespace Ui {
/**
 * @brief UI class for OrderElement.
 *
 * This class is generated by Qt Designer and contains the widgets for the
 * OrderElement interface.
 */
class OrderElement;
}

/**
 * @class OrderElement
 * @brief Represents a single item within a order.
 *
 * The OrderElement widget displays the product information (name, price, and quantity)
 * and manages the quantity adjustments for the product. It also emits signals when the
 * quantity is increased or reduced.
 */
class OrderElement : public QWidget {
  Q_OBJECT
  
private:
  Ui::OrderElement* ui = nullptr; ///< Pointer to the UI elements.
  const Product& product;           ///< Reference to the associated Product.
  size_t quantity = 0;              ///< Current quantity of the product in the order.
  double totalPrice = 0;            ///< Total price calculated as quantity * product price.
  
public:
  /**
   * @brief Constructs a OrderElement widget.
   *
   * Initializes the OrderElement with the given product and sets up the display
   * and signal-slot connections.
   *
   * @param parent Pointer to the parent widget.
   * @param myProduct Reference to the Product to be displayed.
   */
  explicit OrderElement(QWidget *parent, const Product& myProduct);
  
  /**
   * @brief Destructor.
   *
   * Cleans up the UI resources.
   */
  ~OrderElement();
  
public:
  /**
   * @brief Generates the HTML content for this order element.
   *
   * Returns an HTML-formatted string that contains the product name, quantity,
   * unit price, and the total price for this order element.
   *
   * @return QString containing the HTML representation of the order element.
   */
  std::pair<Product, size_t> information();
  
protected:
  /**
   * @brief Updates the display with the current product information.
   *
   * Sets the UI labels to show the product's name, price, and current total price.
   */
  void refreshDisplay();
  
  /**
   * @brief Sets up the signal-slot connections for the widget.
   *
   * Connects the increment and reduce quantity buttons to their respective slots.
   */
  void setupConnections();
  
  /**
   * @brief Removes the widget from its parent layout and schedules it for deletion.
   */
  void deleteSelf();
  
signals:
  /**
   * @brief Emitted when the product quantity is increased.
   *
   * @param product The associated Product.
   */
  void quantityIncreased(const Product& product);
  
  /**
   * @brief Emitted when the product quantity is reduced.
   *
   * @param product The associated Product.
   */
  void quantityReduced(const Product& product);
  
private slots:
  /**
   * @brief Slot called when the increment quantity button is clicked.
   *
   * Increases the product quantity, updates the UI, recalculates the total price,
   * and emits the quantityIncreased signal.
   */
  void incrementQuantity_button_clicked();
  
  /**
   * @brief Slot called when the reduce quantity button is clicked.
   *
   * Decreases the product quantity, updates the UI, recalculates the total price,
   * and emits the quantityReduced signal. If the quantity reaches zero, the widget
   * deletes itself.
   */
  void reduceQuantity_button_clicked();
};

#endif // RECEIPTELEMENT_H
